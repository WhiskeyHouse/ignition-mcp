{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(source:*)",
      "Bash(python:*)",
      "Bash(echo $HOME)",
      "Bash(timeout:*)",
      "Bash(PYTHONPATH=\"/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src\" /Users/pmannion/Documents/whiskeyhouse/ignition-mcp/.venv/bin/python -c \"\nimport sys\nsys.path.insert(0, ''/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src'')\ntry:\n    from ignition_mcp.ignition_tools import IgnitionTools\n    print(''✅ IgnitionTools import successful'')\n    tools = IgnitionTools()\n    print(''✅ IgnitionTools initialization successful'')\n    tool_list = tools.get_tools()\n    print(f''✅ Generated {len(tool_list)} tools'')\n    for i, tool in enumerate(tool_list[:3]):\n        print(f''   {i+1}. {tool.name}: {tool.description}'')\nexcept Exception as e:\n    print(f''❌ Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(mkdir:*)",
      "Bash(ruff check:*)",
      "Bash(uv venv:*)",
      "Bash(uv pip install:*)",
      "Bash(ruff format:*)",
      "Bash(uv run ruff format:*)",
      "Bash(uv run:*)",
      "Bash(RUN_LIVE_GATEWAY_TESTS=1 uv run pytest test_server.py::test_connection -v --tb=short)",
      "Bash(.git/hooks/pre-commit)",
      "Bash(chmod:*)",
      "Bash(grep:*)",
      "Bash(PYTHONPATH=\"/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src\" python -c \"\nfrom ignition_mcp.api_generator import IgnitionAPIGenerator\ngenerator = IgnitionAPIGenerator()\ntools = generator.generate_tools()\nsecret_tools = [t for t in tools if ''secret'' in t[''name''] or ''secret'' in t[''_ignition_path'']]\nprint(f''Found {len(secret_tools)} secret provider tools:'')\nfor tool in secret_tools:\n    print(f''  - {tool[\"\"name\"\"]}: {tool[\"\"description\"\"]} ({tool[\"\"_ignition_method\"\"]} {tool[\"\"_ignition_path\"\"]})'')\n\")",
      "Bash(PYTHONPATH=\"/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src\" python -c \"\nfrom ignition_mcp.api_generator import IgnitionAPIGenerator\nimport json\ngenerator = IgnitionAPIGenerator()\npaths = generator.spec.get(''paths'', {})\nsecret_paths = [path for path in paths.keys() if ''secret-provider'' in path]\nprint(''All secret-provider paths in OpenAPI:'')\nfor path in sorted(secret_paths):\n    print(f''  {path}'')\n    for method in paths[path]:\n        if method.lower() in [''get'', ''post'', ''put'', ''patch'', ''delete'']:\n            print(f''    {method.upper()}: {paths[path][method].get(\"\"summary\"\", \"\"No summary\"\")}'')\n\")",
      "Bash(PYTHONPATH=\"/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src\" python -c \"\nfrom ignition_mcp.api_generator import IgnitionAPIGenerator\ngenerator = IgnitionAPIGenerator()\ntools = generator.generate_tools()\nsecret_tools = [t for t in tools if ''secret'' in t[''name''] or ''secret'' in t[''_ignition_path'']]\nprint(f''Found {len(secret_tools)} secret provider tools:'')\nfor tool in sorted(secret_tools, key=lambda x: x[''_ignition_path'']):\n    print(f''  - {tool[\"\"name\"\"]}: {tool[\"\"description\"\"]} ({tool[\"\"_ignition_method\"\"]} {tool[\"\"_ignition_path\"\"]})'')\n\")",
      "Bash(PYTHONPATH=\"/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src\" python -c \"\nfrom ignition_mcp.ignition_tools import IgnitionTools\nprint(''✅ IgnitionTools import successful'')\ntools = IgnitionTools()\nprint(''✅ IgnitionTools initialization successful'')\ntool_list = tools.get_tools()\nprint(f''✅ Generated {len(tool_list)} tools'')\nsecret_tools = [t for t in tool_list if ''secret'' in t.name or ''secret'' in t.description.lower()]\nprint(f''✅ Found {len(secret_tools)} secret provider tools:'')\nfor i, tool in enumerate(secret_tools[:5]):\n    print(f''   {i+1}. {tool.name}: {tool.description}'')\nif len(secret_tools) > 5:\n    print(f''   ... and {len(secret_tools) - 5} more'')\n\")",
      "Bash(PYTHONPATH=\"/Users/pmannion/Documents/whiskeyhouse/ignition-mcp/src\" python -c \"\nfrom ignition_mcp.api_generator import IgnitionAPIGenerator\nimport json\ngenerator = IgnitionAPIGenerator()\npaths = generator.spec.get(''paths'', {})\n\n# Get all unique path prefixes to see what categories exist\ncategories = set()\nfor path in paths.keys():\n    parts = path.split(''/'')\n    if len(parts) >= 5:\n        categories.add(''/''.join(parts[:5]))\n    elif len(parts) >= 4:\n        categories.add(''/''.join(parts[:4]))\n\nprint(''Available API endpoint categories:'')\nfor category in sorted(categories):\n    if ''api/v1'' in category:\n        count = len([p for p in paths.keys() if p.startswith(category)])\n        print(f''  {category} ({count} endpoints)'')\n\")"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "ignition-mcp"
  ]
}